// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc7073.Bengalbot.subsystems;


import org.usfirst.frc7073.Bengalbot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Spark rightMotor;
    private Spark leftMotor;
    private DifferentialDrive differentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private double PrevY;
    private double PrevTwist;
  
    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        rightMotor = new Spark(1);
        addChild("Right Motor",rightMotor);
        rightMotor.setInverted(false);
        
        leftMotor = new Spark(2);
        addChild("Left Motor",leftMotor);
        leftMotor.setInverted(false);
        
        differentialDrive = new DifferentialDrive(rightMotor, leftMotor);
        addChild("Differential Drive",differentialDrive);
        differentialDrive.setSafetyEnabled(true);
        differentialDrive.setExpiration(0.1);
        differentialDrive.setMaxOutput(1.0);

        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    
        PrevY = 0.0;
        PrevTwist = 0.0;
}

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new ArcadeDrive());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void arcadeDrive( Joystick stick ) {
        double DriveSpeed;
        double TurnSpeed;
        double Scaler;
        double K = 0.1;
    
        // Apply a filter to the speed and turn joystick inputs
        TurnSpeed = K *(stick.getTwist()) + (1.0 - K) * PrevTwist;
        DriveSpeed = K *(-stick.getY()) + (1.0 - K) * PrevY;
        Scaler = -stick.getThrottle();
        Scaler = ((1.0 + Scaler) / 2.0) * 0.75;
        PrevY = DriveSpeed;
        PrevTwist = TurnSpeed;
    
        differentialDrive.arcadeDrive(DriveSpeed* Scaler, (stick.getTwist() * Scaler));
    
        // Curvature (cheesy) drive is an alternative to arcade that gives better turning control.
        // differentialDrive.curvatureDrive(stick.getY(), stick.getX(), stick.getButton(1));
    
    }

    public void driveStraight( double speed ) {
        differentialDrive.tankDrive(speed, speed);
    }

}

