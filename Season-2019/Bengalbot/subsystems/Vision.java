// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc7073.Bengalbot.subsystems;

import org.usfirst.frc7073.Bengalbot.subsystems.VisionPipe;
import org.usfirst.frc7073.Bengalbot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.vision.VisionThread;
import org.opencv.core.Rect;
import org.opencv.imgproc.Imgproc;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Vision extends Subsystem {

    private static final int IMG_WIDTH = 320;
    private static final int IMG_HEIGHT = 240;

    private VisionThread visionThread;
    private double centerX = 0.0;
    private double ObjectWidth = 0.0;
    private Object imgLock = new Object();

    private UsbCamera camera;
  
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Vision(){ 

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        camera = CameraServer.getInstance().startAutomaticCapture();
        camera.setResolution(IMG_WIDTH, IMG_HEIGHT);

    }

    @Override
    public void initDefaultCommand() {


        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.



public int GetImageWidth() {

    return IMG_WIDTH;

}

public double GetCenterX() {
    double returnCenterX;

    synchronized (imgLock) {
        returnCenterX = centerX;
    }
    return returnCenterX;
}


public double GetObjectWidth() {
    double returnObjectWidth;

    synchronized (imgLock) {
        returnObjectWidth = ObjectWidth;
    }
    return returnObjectWidth;
}

public void startVisionThread() {
    visionThread = new VisionThread(camera, new VisionPipe(), pipeline -> {
        int biggest = -1;
        double biggestWidth = 0;
        double biggestCenter = 0;

        for (int i = 0; i < pipeline.filterContoursOutput().size(); i++) {
            Rect r = Imgproc.boundingRect(pipeline.filterContoursOutput().get(i));

            if (biggest < 0) {      // First element in list
                biggest = i;
                biggestWidth = r.width;
                biggestCenter = r.x + (r.width / 2);
            }
            else if (r.width > biggestWidth ) {  // If bigger that previous biggest
                biggest = i;
                biggestWidth = r.width;
                biggestCenter = r.x + (r.width / 2);
            }

        }

        synchronized (imgLock) {
            centerX =biggestCenter;
            ObjectWidth = biggestWidth;
        }
    });
    visionThread.start();

}

}
