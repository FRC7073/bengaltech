// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc7073.Bengalbot.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc7073.Bengalbot.Robot;
import org.usfirst.frc7073.Bengalbot.subsystems.Vision;

/**
 *
 */
public class AutoDriveToBall extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutoDriveToBall() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        double centerX;
        int ImageWidth;
        double ObjectWidth;
        double DriveSpeed;      // -1 to +1, reverse to forward
        double TurnSpeed;       // -1 to +1
    
        ImageWidth = Robot.vision.GetImageWidth();
        centerX = Robot.vision.GetCenterX();
        ObjectWidth = Robot.vision.GetObjectWidth();

        double turn = (ImageWidth / 2) - centerX ;
        SmartDashboard.putNumber("CenterX", centerX);
        SmartDashboard.putNumber("ImgWidth", ImageWidth);
        SmartDashboard.putNumber("Turn", turn);
        SmartDashboard.putNumber("Object Width", ObjectWidth);

        // Robot.driveTrain.driveStraight( 0.0 );

        if (ObjectWidth > 0.0) {
            //DriveSpeed = (0.8 - ObjectWidth / ImageWidth) * 1.0;
            if ((ObjectWidth / ImageWidth) < 0.8)
                DriveSpeed = 0.5;
            else
                DriveSpeed = 0.0;
            TurnSpeed = turn * 0.005;
        }
        else {
            DriveSpeed = 0.0;
            TurnSpeed = 0.0;
        }

        if (DriveSpeed > 0.6)
            DriveSpeed = 0.6;
        if (DriveSpeed < -0.6)
            DriveSpeed = -0.6;
        if (TurnSpeed > 0.6)
            TurnSpeed = 0.6;
        if (TurnSpeed < -0.6)
        TurnSpeed = -0.6;

        Robot.driveTrain.arcadeDrive( DriveSpeed, TurnSpeed );
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
